rm(newtesting)
newtesting <- testing
newtesting[, c(3:119)] <- 0
head(newtesting)
str(newtesting)
rm(newtesting)
newtesting <- training
newtesting[, c(1,4:119)] <- 0
head(newtesting)
d1 <- c(10, 2, 23000)
newtesting[1, c("FiberWidthCh1", "PerimStatusCh1", "TotalIntench2")] <- d1
newtesting[1, "FiberWidthCh1"] <- 23000
head(newtesting)
rm(newtesting)
newtesting <- training
newtesting[, c(1,4:119)] <- 0
newtesting[1, "TotalIntench2"] <- 23000
newtesting[1, "FiberWidthCh1"] <- 10
newtesting[1, "PerimStatusCh1"] <- 2
newtesting[2, "TotalIntench2"] <- 50000
newtesting[2, "FiberWidthCh1"] <- 10
newtesting[2, "VarIntenCh4"] <- 100
newtesting[3, "TotalIntench2"] <- 57000
newtesting[3, "FiberWidthCh1"] <- 8
newtesting[3, "VarIntenCh4"] <- 100
newtesting[4, "FiberWidthCh1"] <- 8
newtesting[4, "VarIntenCh4"] <- 100
newtesting[4, "PerimStatusCh1"] <- 2
dim(newtesting)
newtesting1 <- newtesting[1:4, ]
dim(newtesting1)
dim(testing)
str(newtesting1)
head(newtesting)
head(newtesting1)
modFit$finalModel
pred(modFit$finalModel, newdata=newtesting1)
pred <- predict(modFit$finalModel, newdata=newtesting1)
pred <- predict(modFit, newdata=newtesting1)
table(pred)
pred
table(pred, newtesting1$Class)
head(newtesting1)
rm(training)
rm(testing)
rm(inTrain)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
names(training)
str(training)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
dim(olive)
head(olive)
olive = olive[,-1]
head(olive)
install.packages("https://cran.r-project.org/bin/windows/contrib/3.2/tree_1.0-36.zip", repos = NULL)
treeMod <- tree(Area ~ ., data = olive)
library(tree)
treeMod <- tree(Area ~ ., data = olive)
summary(treeMod)
newdata = as.data.frame(t(colMeans(olive)))
modFit1 <- train(Area ~ ., method = "rpart", data = olive)
predict(modFit1, newdata = as.data.frame(t(colMeans(olive))))
predict(treeMod, newdata = as.data.frame(t(colMeans(olive))), type = )
predict(treeMod, newdata = as.data.frame(t(colMeans(olive))), type = class)
predict(treeMod, newdata = as.data.frame(t(colMeans(olive))))
data(SAheart)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(SAheart)
q4fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family="binomial", data=SAheart)
SAheart$chd <- as.factor(SAheart$chd)
q4fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family="binomial", data=SAheart)
pred2 <- predict(q4fit, trainSA)
pred3 <- predict(q4fit, testSA)
missClass <- function(trainSA$chd,pred2){sum(((pred2 > 0.5)*1) != trainSA$chd)/length(trainSA$chd)}
trainvalues <- trainSA$chd
testvalues <- test$chd
testvalues <- testSA$chd
missClass <- function(trainvalues,pred2){sum(((pred2 > 0.5)*1) != trainvalues)/length(trainvalues)}
missClass2 <- function(testvalues,pred3){sum(((pred3 > 0.5)*1) != testvalues)/length(testvalues)}
missClass2
missClass
missClass()
pred2
pred3
trainvalues
testvalues
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainvalues,pred2)
rm(q4fit)
rm(pred2)
rm(pred3)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
q4fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family="binomial", data=SAheart)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
pred2 <- predict(q4fit, trainSA)
pred3 <- predict(q4fit, testSA)
missClass(trainSA$chd, pred2)
missClass(testSA$chd, pred3)
rm(SAheart)
rm(testSA)
rm(trainSA)
rm(q4fit)
rm(pred2, pred3)
rm(seed)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
q4fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family="binomial", data=SAheart)
pred2 <- predict(q4fit, trainSA)
pred3 <- predict(q4fit, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, pred2)
missClass(testSA$chd, pred3)
library(caret)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
q4Fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
pprd1 <- predict(q4Fit, trainSA)
pprd2 <- predict(q4Fit, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, pprd1)
missClass(testSA$chd, pprd2)
data(vowel.train)
data(vowel.test)
names(vowel.train)
head(vowel.train, 2)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., method = "rf", data=vowel.train, prox=TRUE)
pred <- predict(modFit, vowel.test)
varImp(modFit)
library(pgmm)
data(olive)
olive = olive[,-1]
q3fit <- train(Area ~ . , method="rpart", data=olive)
pred1 <- predict(q3fit, newdata = as.data.frame(t(colMeans(olive))))
pred1
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
dim(segmentationOriginal)
names(segmentationOriginal)
names(segmentationOriginal)
head(segmentationOriginal)
testing <- subset(segmentationOriginal, Case=="Train")
rm(testing)
testing <- subset(segmentationOriginal, Case=="Test")
training <- subset(segmentationOriginal, Case=="Train")
dim(training)
dim(testing)
d1 <- subset(segmentationOriginal, TotalIntench2==23000)
d1 <- subset(segmentationOriginal, TotalIntenCh2==23000)
head(d1)
dim(training)
dim(testing)
set.seed(125)
names(training)
training <- traing [, -Case]
training <- training[, -Case]
training <- training[, -"Case"]
training <- training[, -2]
names(training)
testing <- testing[, -2]
names(testing)
modfit2 <- train(Class ~ ., method="rpart", data=training)
ndata <- testing[4,]
str(ndata)
head(ndata,1)
dim(ndata)
rm(ndata)
ndata <- testing[4,]
dim(ndata)
rm(ndata)
ndata <- testing[1:4,]
dim(ndata)
head(ndata)
dim(ndata)
ndata[, c(1, 3:118)] <- 0
dim(ndata)
head(ndata)
summary(ndata)
which(colnames(ndata)=="TotalIntench2")
which(colnames(ndata)=="TotalIntenCh2")
which(colnames(ndata)=="FiberWidthCh1")
which(colnames(ndata)=="PerimStatusCh1")
which(colnames(ndata)=="VarIntenCh4")
ndata[1, c(49, 84, 102)] <- c(10, 2, 23000)
ndata[2, c(49, 111, 102)] <- c(10, 100, 50000)
ndata[3, c(49, 111, 102)] <- c(8, 100, 57000)
ndata[4, c(49, 84, 111)] <- c(8, 2, 100)
pred5 <- predict(modfit2, ndata)
pred5
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- subset(segmentationOriginal, Case=="Train")
testing <- subset(segmentationOriginal, Case=="Test")
dim(training)
dim(testing)
modfit2 <- train(Class ~ ., method="rpart", data=training)
ndata <- testing[1:4,]
ndata[, c(1, 4:118)] <- 0
dim(ndata)
which(colnames(ndata)=="TotalIntenCh2")
which(colnames(ndata)=="FiberWidthCh1")
which(colnames(ndata)=="PerimStatusCh1")
which(colnames(ndata)=="VarIntenCh4")
ndata[1, c(50, 85, 103)] <- c(10, 2, 23000)
ndata[2, c(50, 112, 103)] <- c(10, 100, 50000)
ndata[3, c(50, 112, 103)] <- c(8, 100, 57000)
ndata[4, c(50, 85, 112)] <- c(8, 2, 100)
pred5 <- predict(modfit2, ndata)
pred5
rm(modfit2)
rm(pred5)
rm(ndata)
testing[1, c(50, 85, 103)] <- c(10, 2, 23000)
testing[2, c(50, 112, 103)] <- c(10, 100, 50000)
testing[3, c(50, 112, 103)] <- c(8, 100, 57000)
testing[4, c(50, 85, 112)] <- c(8, 2, 100)
modfit2 <- train(Class ~ ., method="rpart", data=training)
pred5 <- predict(modfit2, testing[1:4,])
pred5
head(testing, 4)
pred6 <- predict(modfit2$finalmodel, testin[4,])
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- subset(segmentationOriginal, Case=="Train")
testing <- subset(segmentationOriginal, Case=="Test")
set.seed(125)
modfit1 <- train(Class ~ ., method="rpart", data=training)
?predict
?predict.rpart
predict(modfit1, testing)
testing[1:4, 3]
modfit1$finalModel
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- subset(segmentationOriginal, Case="Train")
testing <- subset(segmentationOriginal, Case="Test")
dim(training)
dim(testing)
testing <- subset(segmentationOriginal, Case=="Test")
dim(testing)
training <- subset(segmentationOriginal, Case=="Train")
dim(training)
set.seed(125)
modfit1(Class ~ ., method="rpart", data=training)
modfit1 <- train(Class ~ ., method="rpart", data=training)
predict(modfit1, testing)
modfit1$finalModel
modfit1$finalModel
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
training <- vowel.train
testing <- vowel.test
training$y <- as.factor(training$y)
testing$y <- as.factor(testing$y)
set.seed(33833)
rfFit <- train(y ~ ., method="rf", data = training)
gbmFit <- train(y ~ . , method="gbm", data = training)
confusionMatrix(predict(rfFit, newdata = testing), testing$y)
confusionMatrix(predict(gbmFit, newdata = testing), testing$y)
confusionMatrix(predict(rfFit, newdata = testing), predict(gbmFit, newdata = testing))
dim(testing)
pred1 <- predict(rfFit, newdata = testing)
pred2 <- predict(gbmFit, newdata = testing)
testing$rfRight <- pred1 == testing$y
testing$gbmRight <- pred2 == testing$y
names(testing)
head(testing, 20)
testing$bothRight <- testing$rfRight == testing$gbmRight
head(testing, 20)
testing2 <- subset(testing, testing$rfRight==testing$gbmRight)
testing2 <- subset(testing, select = c(1:11))
head(testing2)
confusionMatrix(predict(rfFit, newdata = testing2), testing2$y)
confusionMatrix(predict(gbmFit, newdata = testing2), testing2$y)
testing$pred1 <- pred1
testing$pred2 <- pred2
dim(testing)
head(testing)
testing2 <- subset(testing, testing$pred1 = testing$pred2, select = c(1:11))
testing2 <- subset(testing, testing$pred1 == testing$pred2, select = c(1:11))
head(testing2)
confusionMatrix(predict(rfFit, newdata = testing2), testing2$y)
confusionMatrix(predict(gbmFit, newdata = testing2), testing2$y)
rm(training)
rm(testing, testing2, pred1, pred2)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(AlzheimerDisease)
AlzheimerDisease
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
dim(training)
dim(testing)
names(training)
head(training, 2)
rm(rfFit, gbmFit)
names(training)
rfFit <- train(diagnosis ~ ., method = "rf", trcontrol= traincontrol(method="cv", number=3), data=training)
rfFit <- train(diagnosis ~ ., method = "rf", trcontrol= trainControl(method="cv", number=3), data=training)
gbmFit <- train(diagnosis ~ ., method = "gbm", data=training)
ldaFit <- train(diagnosis ~ ., method = "lda", trcontrol= trainControl(method="cv", number=3), data=training)
pred1 <- predict(rfFit, testing)
pred2 <- predict(gbmFit, testing)
pred3 <- predict(ldaFit, testing)
rm(pred1, pred2, pred3)
pred1 <- predict(rfFit, training)
pred2 <- predict(gbmFit, training)
pred3 <- predict(ldaFit, training)
rm(pred1, pred2, pred3)
pred1 <- predict(rfFit, testing)
pred2 <- predict(gbmFit, testing)
pred3 <- predict(ldaFit, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
comboFit <- train(diagnosis ~ ., method = "rf", data = predDF)
rmse(pred1, testing$diagnosis)
RMSE(pred1, testing$diagnosis)
RMSE(pred1,testing$diagnosis)
sqrt(sum((pred1 - testing$diagnosis)^2))
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
pred4 <- predict(comboFit, predDF)
confusionMatrix(pred4, testing$diagnosis)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
str(training$diagnosis)
rfFit <- train(diagnosis ~ ., method = "rf", data = training)
gbmFit <- train(diagnosis ~ ., method = "gbm", data = training)
ldaFit <- train(diagnosis ~ ., method = "lda", data = training)
ldaFit <- train(diagnosis ~ ., method = "lda", data = training)
pred1 <- predict(rfFit, testing)
pred2 <- predict(gbmFit, testing)
pred3 <- predict(ldaFit, testing)
RMSE(pred1, testing$diagnosis)
predDF <- data.frame(pred1, pred2, pred3, testing$diagnosis)
combFit <- train(diagnosis ~ ., method = "rf", data= predDF)
predDF <- data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
combFit <- train(diagnosis ~ ., method = "rf", data= predDF)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(predict(combFit, predDF), testing$diagnosis)
library(caret)
?plot.enet
install.packages("enet")
install.packages("elasticnet")
names(training)
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
names(training)
modFit1 <- train(CompressiveStrength ~ ., method = "lasso", data = training)
modFit1 <- train(CompressiveStrength ~ ., method = "lasso", data = training)
modFit1$finalModel
?plot.enet
plot.enet(modFit1, xvar="penalty")
pred1 <- predict(modFit1, data=testing)
rm(pred1)
pred1 <- predict(modFit1, newdata = testing)
plot.enet(pred1, xvar="penalty")
plot.enet(modFit1)
str(modFit1)
plot.enet(modFit1$finalModel, xvar = "penalty")
plot.enet(modFit1$finalModel, xvar = "penalty")
names(testing)
str(modFit1$finalModel)
modFit1$finalModel.penalty
str(modFit1)
plot.enet(modFit1$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(modFit1$results, xvar = "penalty", use.color = TRUE)
modFit1$results
modFit1$bestTune
modFit1$xlevels
modFit1$coefnames
?ts
Library(caret)set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict(modFit, newdata = testing)
accuracy(pred, testing$CompressiveStrength)
library(forecast)
accuracy(pred, testing$CompressiveStrength)
RMSE(pred, testing$CompressiveStrength)
accuracy(pred, testing$CompressiveStrength)
Rserve()
install.packages("Rserve")
library(Rserve)
Rserve()
?kmeans
library(Rserve)
Rserve()
library(manipulate)
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x), x=slider(1:100))
manipulate(plot(1:x), x=slider(1,100))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myplot()
dim(cars)
head(cars)
myplot(5)
library(ggplot2)
myplot(5)
manipulate(myplot(s), s = slider(0, 2, step = 0.1))
?abline
install.packages("rCharts")
library(devtools)
install.packages("devtools")
library(devtools)
devtools::install.github("ramnathv/rCharts@dev")
devtools::install_github("ramnathv/rCharts@dev")
library(rCharts)
devtools::install_github("ramnathv/rCharts@dev")
library(downloader)
install.packages("downloader")
library(downloader)
download("https://github.com/ramnathv/rCharts/archive/master.tar.gz", "rCharts.tar.gz")
install.packages("rCharts.tar.gz", repos = NULL, type = "source")
library(rCharts)
require(rCharts)
install.packages("rCharts.tar.gz", repos = NULL, type = "source")
install.packages(c("base64enc", "boot", "caret", "class", "cluster", "codetools", "curl", "dplyr", "evaluate", "foreign", "formatR", "git2r", "highr", "HistData", "jsonlite", "KernSmooth", "knitr", "lattice", "lubridate", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "packrat", "pander", "pbkrtest", "PKI", "R6", "rattle", "RcppArmadillo", "rmarkdown", "rpart", "rstudioapi", "scales", "spatial", "stringi", "survival", "testthat"))
install.packages(c("base64enc", "boot", "caret", "class", "cluster",
)
install.packages("ggplot2")
install.packages("base64enc")
library(base64enc)
library(devtools)
devtools::install_github("ramnathv/rCharts")
library(rCharts)
data("airquality")
table1 <- dTable(airquality, sPaginationType = "full_numbers")
table1$save(./fig/table1.html', standalone=TRUE)
)
table1 <- dTable(airquality, sPaginationType = "full_numbers")
version
runExample("05_sliders")
library(shiny)
runExample("05_sliders")
setwd("C:/Users/dukandarr/OneDrive/Knowledge base/John Hopkins Data Science Specialization/9. Developing Data Products/ShinyProject")
library(shinyapps)
library(shiny)
shinyapps::deployApp()
shinyapps::deployApp(ShinyDemo)
